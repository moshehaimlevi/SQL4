############################################################################ SECTION A:
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,  
    name TEXT NOT NULL,                            
    price REAL NOT NULL,                           
    category_id INTEGER,                           
    FOREIGN KEY (category_id) REFERENCES category(category_id)
	);

CREATE TABLE category (
    category_id INT PRIMARY KEY,
    name TEXT
);

CREATE TABLE nutritions (
    nutrition_id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INT,
    name TEXT,
    calories REAL,
    fats REAL,
    sugar REAL,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,  
    date_time TEXT,                               
    address TEXT,                                 
    customer_name TEXT,                           
    customer_ph TEXT,                             
    total_price REAL
	);

CREATE TABLE orders_products (
    order_id INT,
    product_id INT,
    amount INT,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id), 
    FOREIGN KEY (product_id) REFERENCES products(product_id)  
);

############################################################################ SECTION B:
טבלת קטגוריות אלו טבלאות אחד לרבים
Category → Products
One-to-Many

טבלת קטגוריות אלו טבלאות אחד לרבים
Products → Nutritions
One-to-Many

טבלת קטגוריות אלו טבלאות אחד לרבים
Orders → Orders_Products 
One-to-Many

טבלת קטגוריות אלו טבלאות אחד לרבים
Products → Orders_Products
One-to-Many

טבלת קטגוריות אלו טבלאות רבים לרבים
Orders ↔ Products 
Many-to-Many

############################################################################ SECTION C:
INSERT INTO category (category_id, name) VALUES
(1, 'Beverages'),
(2, 'Snacks'),
(3, 'Dairy'),
(4, 'Fruits'),
(5, 'Vegetables');

INSERT INTO products (name, price, category_id) VALUES
('Orange Juice', 5.99, 1),
('Chocolate Bar', 2.50, 2),
('Milk', 3.20, 3),
('Apple', 1.50, 4),
('Carrot', 0.99, 5),
('Coca Cola', 1.50, 1),    
('Pepsi', 1.40, 1),        
('Water Bottle', 0.99, 1),
('Orange Soda', 1.70, 1), 
('Iced Tea', 2.00, 1),    
('Potato Chips', 1.80, 2),  
('Pretzels', 2.20, 2),      
('Popcorn', 1.99, 2),        
('Granola Bar', 1.50, 2),  
('Cookies', 3.00, 2),       
('Cheese', 4.50, 3),    
('Yogurt', 1.25, 3),     
('Butter', 3.75, 3),      
('Cream Cheese', 2.50, 3),
('Ice Cream', 5.00, 3),   
('Banana', 1.20, 4),     
('Grapes', 2.99, 4),     
('Mango', 1.75, 4),      
('Pineapple', 3.00, 4),   
('Strawberries', 2.80, 4);

INSERT INTO nutritions (product_id, name, calories, fats, sugar) VALUES
(1, 'Orange Juice', 120, 0.2, 20),
(2, 'Chocolate Bar', 220, 12, 18),
(3, 'Milk', 150, 8, 12),
(4, 'Apple', 95, 0.3, 19),
(5, 'Carrot', 41, 0.1, 5),
(6, 'Coca Cola', 140, 0, 39),      
(7, 'Pepsi', 150, 0, 41),          
(8, 'Water Bottle', 0, 0, 0),      
(9, 'Orange Soda', 160, 0, 44),   
(10, 'Iced Tea', 90, 0, 23),      
(11, 'Potato Chips', 160, 10, 1),  
(12, 'Pretzels', 110, 1, 1),       
(13, 'Popcorn', 120, 5, 0),       
(14, 'Granola Bar', 150, 6, 7),   
(15, 'Cookies', 250, 12, 18),      
(16, 'Cheese', 113, 9, 1),         
(17, 'Yogurt', 80, 1.5, 11),       
(18, 'Butter', 100, 11, 0),       
(19, 'Cream Cheese', 99, 10, 1),   
(20, 'Ice Cream', 270, 14, 28),   
(21, 'Banana', 105, 0.3, 14),     
(22, 'Grapes', 62, 0.3, 15),      
(23, 'Mango', 99, 0.6, 23),        
(24, 'Pineapple', 50, 0.1, 10),   
(25, 'Strawberries', 53, 0.5, 8);  

INSERT INTO orders (date_time, address, customer_name, customer_ph, total_price) VALUES
('2024-09-17 10:30', '123 Main St', 'John Doe', '555-1234', 30.08),
('2024-09-17 11:45', '456 Oak St', 'Jane Smith', '555-5678', 20.13),
('2024-09-17 12:15', '789 Pine St', 'Emily Davis', '555-8765', 22.22),
('2024-09-17 13:00', '321 Elm St', 'Michael Johnson', '555-4321', 15.15),
('2024-09-17 13:30', '654 Maple St', 'Sarah Wilson', '555-6789', 30.99);

INSERT INTO orders_products (order_id, product_id, amount) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 3, 1),
(3, 4, 3),
(4, 5, 5),
(5, 1, 1),
(5, 3, 2),
(5, 4, 2),
(1, 6, 3),    
(1, 11, 1),    
(2, 7, 2),     
(2, 12, 2),    
(3, 8, 1),     
(3, 13, 2),  
(4, 9, 1),    
(4, 14, 2),    
(5, 10, 1),   
(5, 15, 1),    
(1, 16, 1),    
(2, 17, 3),    
(3, 18, 2),  
(4, 19, 1),   
(5, 20, 1),    
(1, 21, 4),    
(2, 22, 2),    
(3, 23, 3),    
(4, 24, 1),   
(5, 25, 2);    

############################################################################ SECTION D:
############################################################################SECTION NUMBER 1:

SELECT 
    p.product_id,
    p.name AS product_name,
    p.price,
    c.name AS category_name,
    n.name AS nutrition_name,
    n.calories,
    n.fats,
    n.sugar
FROM 
    products p
JOIN 
    category c ON p.category_id = c.category_id
LEFT JOIN 
    nutritions n ON p.product_id = n.product_id;

############################################################################SECTION NUMBER 2:
SELECT 
    o.order_id,
    o.date_time,
    o.address,
    o.customer_name,
    o.customer_ph,
    o.total_price,
    op.amount,
    p.product_id,
    p.name AS product_name,
    p.price AS product_price,
    c.name AS category_name
FROM 
    orders o
JOIN 
    orders_products op ON o.order_id = op.order_id
JOIN 
    products p ON op.product_id = p.product_id
JOIN 
    category c ON p.category_id = c.category_id;

############################################################################ SECTION NUMBER 3:
INSERT INTO orders_products (order_id, product_id, amount) 
VALUES
(1, 2, 1),    
(2, 3, 2),    
(3, 4, 3),    
(4, 5, 5),   
(5, 1, 1),   
(6, 2, 2),    
(7, 3, 1),    
(8, 4, 2),    
(9, 5, 3),    
(10, 1, 2),   
(11, 6, 1),  
(12, 7, 2),  
(13, 8, 1),   
(14, 9, 2),  
(15, 10, 1),  
(16, 11, 2),  
(17, 12, 3),  
(18, 13, 2),  
(19, 14, 1),  
(20, 15, 1), 
(21, 16, 3),  
(22, 17, 1),  
(23, 18, 2), 
(24, 19, 1),  
(25, 20, 1), 
(26, 21, 4), 
(27, 22, 2),  
(28, 23, 3);

############################################################################ SECTION NUMBER 4:
UPDATE orders
SET total_price = (
    SELECT SUM(op.amount * p.price)
    FROM orders_products op
    JOIN products p ON op.product_id = p.product_id
    WHERE op.order_id = orders.order_id
);

############################################################################ SECTION NUMBER 5:
SELECT order_id, total_price     ###THE MOST EXPENSIVE###
FROM orders
ORDER BY total_price DESC
LIMIT 1;
#######THE MOST EXPENSIVE IS 30.99#########


SELECT order_id, total_price   ### THE CHEAPEST###
FROM orders
ORDER BY total_price ASC
LIMIT 1;
########THE CHEAPEST IS 15.15#########


SELECT AVG(total_price) AS average_order_price
FROM orders;
########AVG IS 23.714########

############################################################################ SECTION NUMBER 6:
SELECT customer_name, COUNT(*) AS order_count
FROM orders
GROUP BY customer_name
ORDER BY order_count DESC
LIMIT 1; 
########HER NAME IS SARAH WILSON#########

############################################################################ SECTION NUMBER 7:
SELECT p.name AS product_name, SUM(op.amount) AS total_sold
FROM orders_products op
JOIN products p ON op.product_id = p.product_id
GROUP BY p.product_id
ORDER BY total_sold DESC
LIMIT 1;
########CARROT 5 TIMES IS THE MOST SOLD########

SELECT p.name AS product_name, SUM(op.amount) AS total_sold
FROM orders_products op
JOIN products p ON op.product_id = p.product_id
GROUP BY p.product_id
ORDER BY total_sold ASC
LIMIT 1;
##########LEAST SOLD IS A CHOCOLATE BAR ONCE#########

SELECT AVG(total_sold) AS average_sales
FROM (
    SELECT SUM(op.amount) AS total_sold
    FROM orders_products op
    GROUP BY op.product_id
) AS product_sales;
######AVG SALES IS 2.12#######


############################################################################ SECTION NUMBER 8:

SELECT c.name AS category_name, SUM(op.amount) AS total_sold
FROM orders_products op
JOIN products p ON op.product_id = p.product_id
JOIN category c ON p.category_id = c.category_id
GROUP BY c.category_id
ORDER BY total_sold DESC
LIMIT 1;
######FRUITS MOST SOLD CATEGORY BY 17#########

SELECT c.name AS category_name, SUM(op.amount) AS total_sold
FROM orders_products op
JOIN products p ON op.product_id = p.product_id
JOIN category c ON p.category_id = c.category_id
GROUP BY c.category_id
ORDER BY total_sold ASC
LIMIT 1;
####VEGETABLES LEAST SOLD BY 5########


















