########################## SECTION NUMBER 1:
.הוא מאפשר לבצע פונקציות חלונות בתוך כל מחיצה מבלי לכווץ את הנתונים לשורה אחת לכל קבוצה , GROUP BY-אך בניגוד ל , (כמו GROUP BY) הוא מחלק את ערכת התוצאות למחיצות או תת-קבוצת 
.כדי לחשב את התוצאות עבור כל מחיצה מבלי להסיר את השורות האחרות (למשל, ROW_NUMBER(), RANK(), SUM(), AVG() וכו') הוא משמש עם פונקציות חלון 
.התוצאה תשמור על כל השורות ממערך התוצאות המקורי, אך פונקציות החלון יפעלו בתוך כל מחיצה PARTITION BY לאחר החלת 

########################## SECTION NUMBER 2:
-> מפעיל:
מטרה: האופרטור -> משמש לחילוץ אובייקט JSON או מערך JSON
לפי מפתח או אינדקס.
 הוא מחזיר אובייקט JSON או מערך JSON :תוצאה
 
->> מפעיל:
JSON מטרה: האופרטור ->> משמש לחילוץ הערך הטקסטואלי של מפתח מאובייקט 
תוצאה: הוא מחזיר מחרוזת טקסט (כלומר, הערך של המפתח כטקסט רגיל).

########################## SECTION NUMBER 3:
id, SERIAL, PRIMARY KEY השאילתה הבאה פותחת טבלה בשם טבלה_לדוגמה ומכניסה בו את הערכים הבאים 
numbers INT זה אומר שיש לו מספר סידורי שאומר שהוא מקבל את הזהות שלו ב ׂׂ(SERIALׁׂ)
בשאילתא הבאה הוא מכניס מספרים (1,2,3)
(4,5,6)
שאילתא הבאה בוחרת מהרשימה את המספר הראשוון שנמצא בכל רשימה של מספרים במקרה הזה בקבוצה הראשונה זה מספר 1 ובקבוצה השנייה זה מספר 4
שאילתא הבאה זו שאילתא שבוחרת קבוצה איפה שהמספר 3 נמצא במקרה הזה בקבוצה 1 היא נמצאת

############################## SECTION NUMBER 4:
שאילתא הבאה היא שאילתא שהיא יוצרת טבלה בשם מוצרים שיש לה מפתח עיקרי ומספר סידורי עוקב עם ערכים של מחיר שאפשר לשמור בו סכומים ולבסוף מס שהמס שלו נמצא על 20 אחוז
שאילתא הבאה מדברת על הכנסת סכומים לערך מחיר בטבלת מוצרים בשווי 100 ו-200
ושאילתא הבאה בוחרת את כל הערכים ששמנו בקבוצת מחיר שזה 100 ו-200
ולבסוף אנחנו נקבל את התוצאה עם מס של 20 פחות מהתוצאה המקורית
  מדבר על פונקציה שהיא תמיד יוצאת מחושבת לגבי מה שאנחנו נותנים בהתאם לשורה שאנו מכניסים או מעדכנים (generated always) המושג
















